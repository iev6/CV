cv::blur( img_nrmls, img_nrmls, cv::Size(3,3) );
//Contours
int thresh = 5;
int max_thresh = 255;
cv::RNG rng(12345);
  cv::Mat canny_output;
  cv::vector<cv::vector<cv::Point> > contours;
  cv::vector<cv::Vec4i> hierarchy;
cv::cvtColor(img_nrmls,canny_output,CV_BGR2GRAY);
  /// Detect edges using canny
  cv::Canny( canny_output, canny_output, thresh, thresh*2, 3 );
  /// Find contours
  cv::findContours( canny_output, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, cv::Point(0, 0) );

  /// Draw contours
  cv::Mat drawing = cv::Mat::zeros( canny_output.size(), CV_8UC3 );
 double  max=0;
 int pos=0,i1;
  for(  i1 = 0; i1< contours.size(); i1++ )
     {
		 if ( cv::contourArea(contours[i1]) >max) { max = cv::contourArea(contours[i1]) ; pos=i1; }
       
     }
      cv::Scalar color = cv::Scalar( rng.uniform(0, 255), rng.uniform(0,255), rng.uniform(0,255) );

cv::drawContours( drawing, contours, pos, color, 2, 8);
float avg1=0,avg2=0,avg3=0;
int j;
/*
for(j=0;j<contours[pos].size();j++)
{ 
	avg1+= canny.at<cv::Vec3b>(contours[pos][j].y,contours[pos][j].x)[0];
	avg2+= img_rgb.at<cv::Vec3b>(contours[pos][j].y,contours[pos][j].x)[1];
	avg3+= img_rgb.at<cv::Vec3b>(contours[pos][j].y,contours[pos][j].x)[2];
	
}
	avg1/=j;
	avg2/=j;
	avg3/=j;
	
*/
 //bool imwrite(const string& filename, InputArray img, const vector<int>& params=vector<int>() )Â¶
 cv::imwrite( "img_nrmls_detect.jpg",drawing);
 cv::imshow("Gray image", drawing);
 cv::imshow(" image", img_nrmls);
 cvWaitKey(0);
 
cout<<"The direction cosines of the largest plane are"<<avg1<<avg2<<avg3; 
 
 
 
 
 
//End of trial code
